package Topological_Sort;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.List;

/**
 * 210. 课程表 II
 *
 * 现在你总共有 n 门课需要选，记为 0 到 n-1。
 * 在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: [0,1]
 * 给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。
 * 可能会有多个正确的顺序，你只要返回一种就可以了。如果不可能完成所有课程，返回一个空数组。
 *
 * 示例 1:
 * 输入: 2, [[1,0]]
 * 输出: [0,1]
 * 解释: 总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 [0,1] 。
 *
 * 示例 2:
 * 输入: 4, [[1,0],[2,0],[3,1],[3,2]]
 * 输出: [0,1,2,3] or [0,2,1,3]
 * 解释: 总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。
 *      因此，一个正确的课程顺序是 [0,1,2,3] 。另一个正确的排序是 [0,2,1,3] 。
 *
 * 说明:
 * 输入的先决条件是由边缘列表表示的图形，而不是邻接矩阵。详情请参见图的表示法。
 * 你可以假定输入的先决条件中没有重复的边。
 *
 * 提示:
 * 这个问题相当于查找一个循环是否存在于有向图中。如果存在循环，则不存在拓扑排序，因此不可能选取所有课程进行学习。
 * 通过 DFS 进行拓扑排序 - 一个关于Coursera的精彩视频教程（21分钟），介绍拓扑排序的基本概念。
 * 拓扑排序也可以通过 BFS 完成。
 *
 * 链接：https://leetcode-cn.com/problems/course-schedule-ii
 */
public class no210_course_schedule_ii {
    List<List<Integer>> edges = new ArrayList<>();
    int[] visited;
    int []result;// 这个不好理解
    int index;

    /**
     * 执行用时：3 ms, 在所有 Java 提交中击败了99.30%的用户
     * 内存消耗：39.6 MB, 在所有 Java 提交中击败了44.34%的用户
     */
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        if (numCourses <= 0) return new int[]{};
        visited = new int[numCourses];
        result = new int[numCourses];
        index = numCourses -1;

        for (int i = 0; i < numCourses; i++) {
            edges.add(i, new ArrayList<>());
        }
        for (int[] iter : prerequisites) {
            edges.get(iter[1]).add(iter[0]);
        }

        for (int i = 0; i < numCourses; i++) {
            if (visited[i] == 0) {
                if (!dfs(i)) {
                    return new int[]{};
                }
            }
        }
        return result;
    }

    private boolean dfs(int key) {
        visited[key] = 1;
        for (int iter : edges.get(key)) {
            if (visited[iter] == 0) {
                boolean res = dfs(iter);
                if (!res) {
                    return false;
                }
            } else if (visited[iter] == 1) {
                return false;
            }
        }
        visited[key] = 2;
        result[index--] = key; // 这个不好理解
        return true;
    }
    public static void main(String args[]){
        no210_course_schedule_ii obj = new no210_course_schedule_ii();
        int []res = obj.findOrder(100,new int[][]{{1,0},{2,0},{2,1},{3,1},{3,2},{4,2},{4,3},{5,3},{5,4},{6,4},{6,5},{7,5},{7,6},{8,6},{8,7},{9,7},{9,8},{10,8},{10,9},{11,9},{11,10},{12,10},{12,11},{13,11},{13,12},{14,12},{14,13},{15,13},{15,14},{16,14},{16,15},{17,15},{17,16},{18,16},{18,17},{19,17},{19,18},{20,18},{20,19},{21,19},{21,20},{22,20},{22,21},{23,21},{23,22},{24,22},{24,23},{25,23},{25,24},{26,24},{26,25},{27,25},{27,26},{28,26},{28,27},{29,27},{29,28},{30,28},{30,29},{31,29},{31,30},{32,30},{32,31},{33,31},{33,32},{34,32},{34,33},{35,33},{35,34},{36,34},{36,35},{37,35},{37,36},{38,36},{38,37},{39,37},{39,38},{40,38},{40,39},{41,39},{41,40},{42,40},{42,41},{43,41},{43,42},{44,42},{44,43},{45,43},{45,44},{46,44},{46,45},{47,45},{47,46},{48,46},{48,47},{49,47},{49,48},{50,48},{50,49},{51,49},{51,50},{52,50},{52,51},{53,51},{53,52},{54,52},{54,53},{55,53},{55,54},{56,54},{56,55},{57,55},{57,56},{58,56},{58,57},{59,57},{59,58},{60,58},{60,59},{61,59},{61,60},{62,60},{62,61},{63,61},{63,62},{64,62},{64,63},{65,63},{65,64},{66,64},{66,65},{67,65},{67,66},{68,66},{68,67},{69,67},{69,68},{70,68},{70,69},{71,69},{71,70},{72,70},{72,71},{73,71},{73,72},{74,72},{74,73},{75,73},{75,74},{76,74},{76,75},{77,75},{77,76},{78,76},{78,77},{79,77},{79,78},{80,78},{80,79},{81,79},{81,80},{82,80},{82,81},{83,81},{83,82},{84,82},{84,83},{85,83},{85,84},{86,84},{86,85},{87,85},{87,86},{88,86},{88,87},{89,87},{89,88},{90,88},{90,89},{91,89},{91,90},{92,90},{92,91},{93,91},{93,92},{94,92},{94,93},{95,93},{95,94},{96,94},{96,95},{97,95},{97,96},{98,96},{98,97},{99,97}});
        print(res);

        obj.edges.clear();
        res = obj.findOrder(2,new int[][]{{1,0},{0,1}});
        print(res);

        obj.edges.clear();
        res = obj.findOrder(2,new int[][]{{1,0}});
        print(res);

        obj.edges.clear();
        res = obj.findOrder(4,new int[][]{{1,0},{2,1}});
        print(res);

        obj.edges.clear();
        res = obj.findOrder(10,new int[][]{{0,1},{1,2},{2,3},{3,4},{9,8},{8,7},{7,6},{6,5}});
        print(res);

        obj.edges.clear();
        res = obj.findOrder(10,new int[][]{{0,1},{1,2},{2,3},{3,4},{9,8},{8,7},{7,6},{6,5},{5,2}});
        print(res);
    }
    public static void print(int[]res){
        for(int iter:res) {
            System.out.print(iter+",");
        }
        System.out.println("");
    }
}
